// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 20 May 2020 20:00:43 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package leopard

/*
#cgo LDFLAGS: -L./build -llibleopard -lstdc++
#cgo linux LDFLAGS: -fopenmp -ldl
#cgo linux CFLAGS: -fopenmp -DENABLE_OPENMP
#include "leopard.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// LeoInit function as declared in leopard/leopard.h:105
func LeoInit(version int32) int32 {
	cversion, _ := (C.int)(version), cgoAllocsUnknown
	__ret := C.leo_init_(cversion)
	__v := (int32)(__ret)
	return __v
}

// LeoResultString function as declared in leopard/leopard.h:127
func LeoResultString(result Leopardresult) string {
	cresult, _ := (C.LeopardResult)(result), cgoAllocsUnknown
	__ret := C.leo_result_string(cresult)
	__v := packPCharString(__ret)
	return __v
}

// LeoEncodeWorkCount function as declared in leopard/leopard.h:143
func LeoEncodeWorkCount(originalCount uint32, recoveryCount uint32) uint32 {
	coriginalCount, _ := (C.uint)(originalCount), cgoAllocsUnknown
	crecoveryCount, _ := (C.uint)(recoveryCount), cgoAllocsUnknown
	__ret := C.leo_encode_work_count(coriginalCount, crecoveryCount)
	__v := (uint32)(__ret)
	return __v
}

// LeoEncode function as declared in leopard/leopard.h:180
func LeoEncode(bufferBytes uint64, originalCount uint32, recoveryCount uint32, workCount uint32, originalData []unsafe.Pointer, workData []unsafe.Pointer) Leopardresult {
	cbufferBytes, _ := (C.uint64_t)(bufferBytes), cgoAllocsUnknown
	coriginalCount, _ := (C.uint)(originalCount), cgoAllocsUnknown
	crecoveryCount, _ := (C.uint)(recoveryCount), cgoAllocsUnknown
	cworkCount, _ := (C.uint)(workCount), cgoAllocsUnknown
	coriginalData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&originalData)).Data)), cgoAllocsUnknown
	cworkData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&workData)).Data)), cgoAllocsUnknown
	__ret := C.leo_encode(cbufferBytes, coriginalCount, crecoveryCount, cworkCount, coriginalData, cworkData)
	__v := (Leopardresult)(__ret)
	return __v
}

// LeoDecodeWorkCount function as declared in leopard/leopard.h:202
func LeoDecodeWorkCount(originalCount uint32, recoveryCount uint32) uint32 {
	coriginalCount, _ := (C.uint)(originalCount), cgoAllocsUnknown
	crecoveryCount, _ := (C.uint)(recoveryCount), cgoAllocsUnknown
	__ret := C.leo_decode_work_count(coriginalCount, crecoveryCount)
	__v := (uint32)(__ret)
	return __v
}

// LeoDecode function as declared in leopard/leopard.h:227
func LeoDecode(bufferBytes uint64, originalCount uint32, recoveryCount uint32, workCount uint32, originalData []unsafe.Pointer, recoveryData []unsafe.Pointer, workData []unsafe.Pointer) Leopardresult {
	cbufferBytes, _ := (C.uint64_t)(bufferBytes), cgoAllocsUnknown
	coriginalCount, _ := (C.uint)(originalCount), cgoAllocsUnknown
	crecoveryCount, _ := (C.uint)(recoveryCount), cgoAllocsUnknown
	cworkCount, _ := (C.uint)(workCount), cgoAllocsUnknown
	coriginalData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&originalData)).Data)), cgoAllocsUnknown
	crecoveryData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&recoveryData)).Data)), cgoAllocsUnknown
	cworkData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&workData)).Data)), cgoAllocsUnknown
	__ret := C.leo_decode(cbufferBytes, coriginalCount, crecoveryCount, cworkCount, coriginalData, crecoveryData, cworkData)
	__v := (Leopardresult)(__ret)
	return __v
}
